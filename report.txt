I have completed the assignment involving the implementation of the mmap and munmap system calls, along with the kmalloc and kfree functions in the xv6 operating system. In this report, I will discuss my approach to these tasks and the design decisions I made along the way.

The mmap system call allows a user program to map a section of memory into its virtual address space. I implemented this by using a linked list to keep track of the mapped regions in each process. The linked list allows for easy access to the metadata associated with each mapped region, such as the starting address, length, and type of region (anonymous or file-backed). I also included additional metadata such as the file descriptor (fd) and offset into the file for file-backed memory regions. To allocate memory for the linked list, I used kmalloc, and to prevent memory leaks, I deallocated the memory using kfree in the freevm function in vm.c.

To implement the munmap system call, I used the linked list to find the corresponding mapped region and remove it from the list. I then used kfree to deallocate the memory associated with the mapped region. To ensure that the unmapped region is not accessed by the process, I marked the corresponding physical pages as free in the page table.

For debugging purposes, I created helper functions that dump the information contained in the linked list to stdout in a neat manner. I also created helper functions to manage and access the data structure used to keep track of mapped regions.

One of the design decisions I made was to only keep track of the mmap regions instead of every address region mapped by the process. This simplifies the data structure and reduces the overhead of tracking every address region. Another decision I made was to duplicate the file descriptor passed into mmap using filedup to prevent the user from closing the file descriptor while the region is still in use.

I encountered several challenges during the implementation of these system calls. One of the challenges was parsing the address argument for the mmap call. Initially, I thought of using argptr for this, but I later discovered that it might not work as expected. I also encountered challenges with managing the physical pages associated with the mapped regions and ensuring that they are marked as free in the page table when the region is unmapped.

In conclusion, the implementation of the mmap and munmap system calls, along with the kmalloc and kfree functions, involved several design decisions and challenges. By using a linked list to keep track of mapped regions and incorporating additional metadata, I was able to implement these system calls successfully. My approach allowed for easy debugging and management of the data structure used to keep track of mapped regions.